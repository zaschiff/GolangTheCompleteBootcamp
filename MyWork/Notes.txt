GOPATH -
    Is the environment variable pointing to a folder under the user directory 
    that contains the source code for the go installation. They are in the src 
    directory and it is common practice to store source code in the package 
    to which it is named.

Code syntax -
    package 'package name' ==> this is the package clause and is the first line
    of code. It declares the name of the package that the go file belongs to.
    if it is not named Main, go will nto execute the code.

    func ==> the keyword to declare a named function that we create.
    The funciton named main is the entry point to the program.

Use the go tools in the command line to run or build your code.
    To build and executable, use go buil 'file name'
    To build, run, and delete the executable in one command use go run 'file name'

Packages -
    There are rules
        R1. All package files that should be in the same directory
        R2. All files in the same directory should belong to the same package
    Each Go package has it's own scope
    There are only two kinds of Go packages: Executable and Library
        Executbale ==> declared with package mian and has a main funcction. Only created for running as program. Not importable
        Library ==> package name matches folder directory and does not containt a main function.It is created only for reusability. 
            importable but not executable
    
Scopes -
    scope is the visibility of an object. Who can see the object.
    Declaration ==> delcares a unique name bound to a scope. Same name cannnot be declared twice with in the same scope.
    
    objects outside a function (like inbetween the import statement and the first function) are package scope, the entire pacakge can see the object.
    If an object is clared between {}, this is considered blocked scope. The object is only visible between matching {}.

    File scope is all objects are visible to the file. Each Go file has it's own scope.

Importing -
    allows a file to use the functionalities from a library package. Importing only happens as the file level.

    Imports can be renmaed to allow duplicate pakcge importing. 
        apply the alias between the import statement and the name of the package 
        ie: import f "fmt", this sets an alias 'f' for the 'fmt' import.

Statments -
    statements instruct go to do something. 
    They are generally one line of code unless separated by a semicolon (;).
    They control the execution flow.

Expressions - 
    line of code that computes one or more values.
    expressions should be used with or within a statement.
    some statements like func calls can also act like expressions.

Comments -
    use comments to explain or document code.
    a single line comment is stated with //
    a multi line comment starts with a /* and ends with */
    There is a command in go to create documentaiton about the project using the comments in the file automatically. 
        The tool is called go doc

Exporting - 
    allows a package to make its functionalities available to other packages.
    To export something, after declaring the name of anobject make the first letter of the name capitlaized
        ie: var cheese string, the variable cheese is not exported. var Cheese string is an exported variable.